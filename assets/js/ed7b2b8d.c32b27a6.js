"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3791],{23514:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var s=i(74848),r=i(28453);const t={sidebar_position:1},a=void 0,l={id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-aac-game-team-b/docs/system-architecture/design",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Harpinder Singh",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-aac-game-team-b/docs/category/system-architecture"},next:{title:"Development Environment",permalink:"/project-aac-game-team-b/docs/system-architecture/development-environment"}},o={},c=[{value:"Components Description",id:"components-description",level:2},{value:"Client (Front-End)",id:"client-front-end",level:3},{value:"Server (Back-End)",id:"server-back-end",level:3},{value:"Database",id:"database",level:3},{value:"Database Design",id:"database-design",level:3}];function d(e){const n={a:"a",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,s.jsx)(n.p,{children:"The architecture of StoryQuest is based on a client-server model using modern web technologies. The front-end client is built\nwith React and Next.js, while the back-end leverages Firebase for real-time database synchronization, authentication, and\naccessible experience for AAC users, incorporating symbol-based communication and text-to-speech capabilities."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requirements"})}),"\n",(0,s.jsx)(n.h2,{id:"components-description",children:"Components Description"}),"\n",(0,s.jsx)(n.h3,{id:"client-front-end",children:"Client (Front-End)"}),"\n",(0,s.jsx)(n.p,{children:"The client is a React application built with Next.js framework, offering server-side rendering for improved performance and SEO. It provides\nthe user interface that students interact with, including AAC features, story navigation, and room management."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Technologies Used:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"React (UI components)"}),"\n",(0,s.jsx)(n.li,{children:"Next.js (Routing and server-side rendering)"}),"\n",(0,s.jsx)(n.li,{children:"Tailwind CSS (Responsive and accessible styling)"}),"\n",(0,s.jsx)(n.li,{children:"Framer Motion (Smooth animations for kids)"}),"\n",(0,s.jsx)(n.li,{children:"ShadCN/UI (Pre-built, accessible UI components)"}),"\n",(0,s.jsx)(n.li,{children:"TypeScript (Ease of use in JavaScript)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Display the homepage with options to create or join a room"}),"\n",(0,s.jsx)(n.li,{children:"Render stories and fill-in-the-blank activities"}),"\n",(0,s.jsx)(n.li,{children:"Handle AAC interactions (symbol grids, text-to-speech)"}),"\n",(0,s.jsx)(n.li,{children:"Communicate with Firebase for real-time updates and authentication"}),"\n",(0,s.jsx)(n.li,{children:"Provide responsive design for tablets and desktops"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Interface:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Firebase SDK: The client uses the Firebase JavaScript SDK for real-time communication with the back-end."}),"\n",(0,s.jsx)(n.li,{children:"AAC Symbol Library (ARASAAC): Provides visual symbols for communication"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"server-back-end",children:"Server (Back-End)"}),"\n",(0,s.jsx)(n.p,{children:"The back-end services are managed by Firebase, which provides real-time database capabilities, authentication, and cloud functions for game logic.\nThis architecture minimizes server management overhead while offering scalability and performance."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Technologies Used:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Firebase Authentication: For secure room joining and session management."}),"\n",(0,s.jsx)(n.li,{children:"Firebase Firestore: A NoSQL real-time database to store game data, room information, and group progress."}),"\n",(0,s.jsx)(n.li,{children:"Firebase Cloud Functions: To handle server-side logic like validating game answers and managing game state."}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Manage session tokens."}),"\n",(0,s.jsx)(n.li,{children:"Handle real-time game state updates across all players."}),"\n",(0,s.jsx)(n.li,{children:"Store and retrieve stories, game progress, and player data."}),"\n",(0,s.jsx)(n.li,{children:"Execute server-side logic for game validation (like answer validation)"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Interfaces:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Client Requests: The client interacts with the server via Firebase SDK calls, which handle real-time data synchronization."}),"\n",(0,s.jsx)(n.li,{children:"Cloud Functions Triggers: Automatically execute server-side logic when certain conditions are met (like when a new answer is submitted)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Users:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"userId: Unique identifier"}),"\n",(0,s.jsx)(n.li,{children:"name: Player's name"}),"\n",(0,s.jsx)(n.li,{children:"preferences: AAC settings, favorite symbols"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Rooms:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"roomId: Unique code for room access"}),"\n",(0,s.jsx)(n.li,{children:"hostId: The player who created the room"}),"\n",(0,s.jsx)(n.li,{children:"players: List of players in the room"}),"\n",(0,s.jsx)(n.li,{children:"currentTurn: Tracks whose turn it is"}),"\n",(0,s.jsx)(n.li,{children:"storyProgress: Current state of the story"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Stories:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"storyId: Unique ID"}),"\n",(0,s.jsx)(n.li,{children:"gradeLevel: Target grade level (1st-3rd)"}),"\n",(0,s.jsx)(n.li,{children:"content: Story text with blanks"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Persist user data and game state"}),"\n",(0,s.jsx)(n.li,{children:"Support real-time synchronization of game progress"}),"\n",(0,s.jsx)(n.li,{children:"Allow dynamic story loading and AAC customization"}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Interfaces:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Firebase Firestore SDK: Used by both client and server to read/write data in real-time"}),"\n",(0,s.jsx)(n.li,{children:"Cloud Functions: Perform automated updates (like saving game progress)"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"database-design",children:"Database Design"}),"\n",(0,s.jsx)(n.p,{children:"Here is the database section with an Entity-Relationship Diagram (ERD) and a table design for StoryQuest.\nSince we are using FireBase Firestore, which is a NoSQL database, the structure will be document-based,\nbut we can still represent it in a relational style for clarity."}),"\n",(0,s.jsx)(n.p,{children:"Entities and Relationships:"}),"\n",(0,s.jsx)(n.p,{children:"User represents a player. A Room is hosted by One user but can have multiple users (as in players).\nA room is then associated with one story. Each user in a room has a corresponding playerProgress."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Entity-Relationship Diagram"}),"\n",(0,s.jsx)(n.em,{children:"DIAGRAM HERE"})]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Table Design"})}),"\n",(0,s.jsx)(n.p,{children:"Here is how the data would be structured in Firestore. Though Firestore is a NoSQL database, this relational layout helps clarify the relationships."}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Users Collection"}),"\n",(0,s.jsx)(n.em,{children:"Table here"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Rooms Collections"}),"\n",(0,s.jsx)(n.em,{children:"Table here"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"RoomPlayers Subcollection (within rooms)"}),"\n",(0,s.jsx)(n.em,{children:"Table here"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Stories Collections"}),"\n",(0,s.jsx)(n.em,{children:"Table here"})]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"PlayerProgress Subcollection (within Rooms)"}),"\n",(0,s.jsx)(n.em,{children:"Table here"})]}),"\n",(0,s.jsx)(n.p,{children:"In addition to the general requirements the Design Document - Part I Architecture will contain:"}),"\n",(0,s.jsx)(n.p,{children:"A description the different components and their interfaces. For example: client, server, database."}),"\n",(0,s.jsx)(n.p,{children:"For each component provide class diagrams showing the classes to be developed (or used) and their relationship."}),"\n",(0,s.jsxs)(n.p,{children:["Sequence diagrams showing the data flow for ",(0,s.jsx)(n.em,{children:"all"})," use cases.\xa0One sequence diagram corresponds to one use case and different use cases should have different corresponding sequence diagrams."]}),"\n",(0,s.jsx)(n.p,{children:"Describe algorithms employed in your project, e.g. neural network paradigm, training and training data set, etc."}),"\n",(0,s.jsx)(n.p,{children:"If there is a database:"}),"\n",(0,s.jsx)(n.p,{children:"Entity-relation diagram."}),"\n",(0,s.jsx)(n.p,{children:"Table design."}),"\n",(0,s.jsxs)(n.p,{children:["A check list for architecture design is attached here ",(0,s.jsx)(n.a,{href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf",children:"architecture_design_checklist.pdf"}),"\xa0 and should be used as a guidance."]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>a,x:()=>l});var s=i(96540);const r={},t=s.createContext(r);function a(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);