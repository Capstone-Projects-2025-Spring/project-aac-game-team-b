"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[1452],{24282:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>l,toc:()=>c});var i=s(74848),r=s(28453);const t={sidebar_position:1},a=void 0,l={id:"system-architecture/Design",title:"Design",description:"Purpose",source:"@site/docs/system-architecture/Design.md",sourceDirName:"system-architecture",slug:"/system-architecture/Design",permalink:"/project-aac-game-team-b/docs/system-architecture/Design",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"shaynaodle",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-aac-game-team-b/docs/category/system-architecture"},next:{title:"Development Environment",permalink:"/project-aac-game-team-b/docs/system-architecture/development-environment"}},o={},c=[{value:"Components Description",id:"components-description",level:2},{value:"Client (Front-End)",id:"client-front-end",level:3},{value:"Server (Back-End)",id:"server-back-end",level:3},{value:"Class Diagrams",id:"class-diagrams",level:3},{value:"Player Management",id:"player-management",level:3},{value:"Room Management",id:"room-management",level:4},{value:"Game Flow Summary",id:"game-flow-summary",level:4},{value:"Database",id:"database",level:3},{value:"Database Design",id:"database-design",level:3},{value:"Use Case Sequence Diagrams",id:"use-case-sequence-diagrams",level:2},{value:"Use Case 1: Room Management - Setting up a new room",id:"use-case-1-room-management---setting-up-a-new-room",level:2},{value:"Use Case 2: Player Customization - New player profile",id:"use-case-2-player-customization---new-player-profile",level:2},{value:"Use Case 3: Room Management - Player Joins a Game through the Join Screen",id:"use-case-3-room-management---player-joins-a-game-through-the-join-screen",level:2},{value:"Use Case 4: Accessibility &amp; AAC",id:"use-case-4-accessibility--aac",level:2},{value:"Game Mechanics",id:"game-mechanics",level:2},{value:"Use Case 5: Cloze Phraze Education - User Chooses an Answer",id:"use-case-5-cloze-phraze-education---user-chooses-an-answer",level:2},{value:"Use Case 6: Collaboration - Users Take Turns Answering a Question",id:"use-case-6-collaboration---users-take-turns-answering-a-question",level:2},{value:"Use Case 7: Difficulty Scaling - User Wants to Change Difficulty",id:"use-case-7-difficulty-scaling---user-wants-to-change-difficulty",level:2}];function d(e){const n={a:"a",em:"em",h2:"h2",h3:"h3",h4:"h4",hr:"hr",li:"li",mermaid:"mermaid",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,i.jsx)(n.p,{children:"The front-end client is built\nwith React and Next.js, while the back-end leverages Firebase for real-time database synchronization, authentication, and\naccessible experience for AAC users, incorporating symbol-based communication and text-to-speech capabilities."}),"\n",(0,i.jsx)(n.h2,{id:"components-description",children:"Components Description"}),"\n",(0,i.jsx)(n.h3,{id:"client-front-end",children:"Client (Front-End)"}),"\n",(0,i.jsx)(n.p,{children:"The client is a React application built with Next.js framework, offering server-side rendering for improved performance and SEO. It provides the user interface that students interact with, including AAC features, story navigation, and room management."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Technologies Used:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"React (UI components)"}),"\n",(0,i.jsx)(n.li,{children:"Next.js (Routing and server-side rendering)"}),"\n",(0,i.jsx)(n.li,{children:"Tailwind CSS (Responsive and accessible styling)"}),"\n",(0,i.jsx)(n.li,{children:"Framer Motion (Smooth animations for kids)"}),"\n",(0,i.jsx)(n.li,{children:"ShadCN/UI (Pre-built, accessible UI components)"}),"\n",(0,i.jsx)(n.li,{children:"TypeScript (Ease of use in JavaScript)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Display the homepage with options to create a profile, create, or join a room."}),"\n",(0,i.jsx)(n.li,{children:"Render stories and cloze-phrase questions"}),"\n",(0,i.jsx)(n.li,{children:"Handle AAC interactions (symbol grids, text-to-speech)"}),"\n",(0,i.jsx)(n.li,{children:"Communicate with Firebase for real-time updates and authentication"}),"\n",(0,i.jsx)(n.li,{children:"Provide responsive design for tablets and desktops"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Interface:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Firebase SDK: The client uses the Firebase JavaScript SDK for real-time communication with the back-end."}),"\n",(0,i.jsx)(n.li,{children:"AAC Symbol Library (ARASAAC): Provides visual symbols for communication"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"server-back-end",children:"Server (Back-End)"}),"\n",(0,i.jsx)(n.p,{children:"The back-end services are managed by Firebase, which provides real-time database capabilities, authentication, and cloud functions for game logic.\nThis architecture minimizes server management overhead while offering scalability and performance."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Technologies Used:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Firebase Authentication: For secure room joining and session management."}),"\n",(0,i.jsx)(n.li,{children:"Firebase Firestore: A NoSQL real-time database to store game data, room information, and group progress."}),"\n",(0,i.jsx)(n.li,{children:"Firebase Cloud Functions: To handle server-side logic like validating game answers and managing game state."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Manage session tokens."}),"\n",(0,i.jsx)(n.li,{children:"Handle real-time game state updates across all players."}),"\n",(0,i.jsx)(n.li,{children:"Store and retrieve stories, game progress, and player data."}),"\n",(0,i.jsx)(n.li,{children:"Execute server-side logic for game validation (like answer validation)"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Interfaces:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Client Requests: The client interacts with the server via Firebase SDK calls, which handle real-time data synchronization."}),"\n",(0,i.jsx)(n.li,{children:"Cloud Functions Triggers: Automatically execute server-side logic when certain conditions are met (like when a new answer is submitted)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"class-diagrams",children:"Class Diagrams"}),"\n",(0,i.jsx)(n.mermaid,{value:"classDiagram\ndirection TB\n    class StartPage {\n\t    +joinGame()\n\t    +hostGame()\n    }\n\n    class HostPage {\n\t    +String story\n\t    +int difficulty\n\t    +int numPlayers\n\t    +selectStory() String\n\t    +selectDifficulty() int\n\t    +selectNumPlayers() int\n\t    +startGameRoom()\n    }\n\n    class PlayerPage {\n\t    +Player[] player\n        +allPlayersJoined boolean\n\t    +startGame()\n    }\n\n    class GameContainer {\n        +selectedWords: String[]\n\t    +updateTurn()\n        +handleSelect(imgUrl: String): void\n    }\n\n    class AACBoard {\n        +String[] pictograms\n\t    +fetchPictograms(query: String): String[]\n        +onSelect(imgUrl: String): void\n    }\n\n    class FirebaseController {\n\t    +authenticateUser()\n\t    +getRoomData(roomId)\n\t    +updateGameState(roomId, data)\n    }\n\n\n    class QuestionDisplay {\n\t    +String[] phrase\n\t    +String playerAnswer\n\t    +int numBlanks\n\t    +fillPhraseFromPlayerAnswer()\n\t    +submit()\n    }\n\n    class Player {\n        +String id\n        +String name\n        +String role\n        +setRole()\n    }\n\n    StartPage <|-- HostPage \n    StartPage <|-- PlayerPage\n    PlayerPage <|-- Player\n    GameContainer *-- QuestionDisplay : Displays answers \n    GameContainer o-- AACBoard : Chooses answers\n    GameContainer --|> PlayerPage : Manages turns\n    GameContainer --|> FirebaseController : Sends answer for validation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Figure 1: Class diagram showing interactions between classes within StoryQuest"})}),"\n",(0,i.jsx)(n.p,{children:"This class diagram shows the relationship between different components in the StoryQuest system."}),"\n",(0,i.jsx)(n.h3,{id:"player-management",children:"Player Management"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Player"})," class encompasses all users who interact with the system. Each player\nhas an id, name, and a role, which can be either 'student' or 'host'. The setRole() function\nassigns a role to a player based on whether they are joining a game or starting a game."]}),"\n",(0,i.jsx)(n.h4,{id:"room-management",children:"Room Management"}),"\n",(0,i.jsx)(n.p,{children:"The system has a StartPage, HostPage, and a PlayerPage, all of which handle room\nmanagement and game setup."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"StartPage: This is the initial landing page where a Player can choose to either\njoin an existing game or host a new one. The functions include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"joinGame(): Allows a player to enter an active game session."}),"\n",(0,i.jsx)(n.li,{children:"hostGame(): Redirects the player to the HostPage to configure a new game session."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"HostPage: This page provides administrative controls for setting up a new game. It\nallows the host to define key game settings, such as:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"selectStory(): Chooses a story template for the game."}),"\n",(0,i.jsx)(n.li,{children:"selectDifficulty(): Sets the level of difficulty (easy, medium, or hard)."}),"\n",(0,i.jsx)(n.li,{children:"selectNumPlayers(): Specifies how many players can join the game (4 max)."}),"\n",(0,i.jsx)(n.li,{children:"startGameRoom(): Initializes the game session and transitions to gameplay mode."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"PlayerPage: This acts as a waiting room where players gather before the game begins."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"player[]: An array that holds all players currently in the game."}),"\n",(0,i.jsx)(n.li,{children:"allPlayersJoined: A boolean that checks if all expected players have joined."}),"\n",(0,i.jsx)(n.li,{children:"startGame(): Triggers the transition from the lobby to gameplay when all players are ready."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"game-flow-summary",children:"Game Flow Summary"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"The host sets up the game in HostPage."}),"\n",(0,i.jsx)(n.li,{children:"Players join a room via StartPage."}),"\n",(0,i.jsx)(n.li,{children:"Players wait in PlayerPage until the game starts."}),"\n",(0,i.jsx)(n.li,{children:"The game begins under GameContainer, displaying a phrase with blanks to fill."}),"\n",(0,i.jsx)(n.li,{children:"Players take turns selecting answers from the AACBoard."}),"\n",(0,i.jsx)(n.li,{children:"The selected word is displayed in QuestionDisplay and sent through FirebaseController."}),"\n",(0,i.jsx)(n.li,{children:"The game continues turn-by-turn until the story is complete."}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Users:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"userId (PK): Unique identifier"}),"\n",(0,i.jsx)(n.li,{children:"name: Player's name"}),"\n",(0,i.jsx)(n.li,{children:"preferences: AAC settings, favorite symbols"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rooms:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"roomId (PK): Unique code for room access"}),"\n",(0,i.jsx)(n.li,{children:"hostId (FK from the Users table): The player who created the room"}),"\n",(0,i.jsx)(n.li,{children:"players: List of players in the room"}),"\n",(0,i.jsx)(n.li,{children:"currentTurn (FK from the users table): Tracks whose turn it is"}),"\n",(0,i.jsx)(n.li,{children:"storyProgress: Current state of the story"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Stories:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"storyId (PK): Unique ID"}),"\n",(0,i.jsx)(n.li,{children:"gradeLevel: Target grade level (3 grade max)"}),"\n",(0,i.jsx)(n.li,{children:"content: Story text with blanks"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Persist user data and game state"}),"\n",(0,i.jsx)(n.li,{children:"Support real-time synchronization of game progress"}),"\n",(0,i.jsx)(n.li,{children:"Allow dynamic story loading and AAC customization"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Interfaces:"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Firebase Firestore SDK: Used by both client and server to read/write data in real-time"}),"\n",(0,i.jsx)(n.li,{children:"Cloud Functions: Perform automated updates (like saving game progress)"}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"database-design",children:"Database Design"}),"\n",(0,i.jsx)(n.p,{children:"Here is the database section with an Entity-Relationship Diagram (ERD) and a table design for StoryQuest.\nSince we are using FireBase Firestore, which is a NoSQL database, the structure will be document-based,\nbut we can still represent it in a relational style for clarity."}),"\n",(0,i.jsx)(n.p,{children:"Entities and Relationships:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"User represents a player."}),"\n",(0,i.jsx)(n.li,{children:"A Room is hosted by One user but can have multiple users (as in players)."}),"\n",(0,i.jsx)(n.li,{children:"A room is then associated with one story."}),"\n",(0,i.jsx)(n.li,{children:"Each user in a room has a corresponding playerProgress."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Entity-Relationship Diagram"})}),"\n",(0,i.jsx)(n.mermaid,{value:'erDiagram\n    USER {\n        string userId PK\n        string name\n        string email\n        json preferences\n        timestamp createdAt\n    }\n\n    ROOM {\n        string roomId PK\n        string hostId FK\n        string storyId FK\n        number gradeLevel\n        number numPlayers\n        string currentTurn FK\n        boolean isActive\n        timestamp createdAt\n    }\n\n    STORY {\n        string storyId PK\n        string title\n        array content\n        number gradeLevel\n        timestamp createdAt\n    }\n\n    ROOM_PLAYERS {\n        string roomId FK\n        string userId FK\n        string name\n        timestamp joinedAt\n    }\n\n    USER ||--o{ ROOM_PLAYERS : "joins"\n    ROOM ||--o{ ROOM_PLAYERS : "has"\n    ROOM ||--|{ STORY : "uses"\n    STORY ||--o{ ROOM : "is played in"'}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:"Figure 2: An entity-relationship diagram showing interactions within the database"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Table Design"})}),"\n",(0,i.jsx)(n.p,{children:"Here is how the data would be structured in Firestore. Though Firestore is a NoSQL database, this relational layout helps clarify the relationships."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Users Collection Figure 3"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"userId (PK)"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Unique Id (Firebase Auth UID)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Player's display name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"preferences"}),(0,i.jsx)(n.td,{children:"Map"}),(0,i.jsx)(n.td,{children:"AAC preferences"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"createdAt"}),(0,i.jsx)(n.td,{children:"Timestamp"}),(0,i.jsx)(n.td,{children:"Account creation date"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Rooms Collections Figure 4"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"roomId (PK)"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Unique code for room access"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"hostId"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"User ID of the room host"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"storyId"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"ID of selected story"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"difficulty"}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Difficulty level selected for the room"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"numPlayers"}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Number of players (1-4)"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"currentTurn"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"User Id of player whose turn it is"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"createdAt"}),(0,i.jsx)(n.td,{children:"Timestamp"}),(0,i.jsx)(n.td,{children:"Room creation date"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"isActive"}),(0,i.jsx)(n.td,{children:"Boolean"}),(0,i.jsx)(n.td,{children:"Indicates if the game is in progress"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"RoomPlayers Subcollection (within rooms) Figure 5"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"userId (PK)"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"User Id of the player"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"name"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Player's display name"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"joinedAt"}),(0,i.jsx)(n.td,{children:"Timestamp"}),(0,i.jsx)(n.td,{children:"Time when the players joined the room"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Stories Collections Figure 6"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"storyId (PK)"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Unique id for the story"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"title"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"Title of the story"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"content"}),(0,i.jsx)(n.td,{children:"Array"}),(0,i.jsx)(n.td,{children:"Story text with blanks marked"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"difficulty"}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Intended difficulty level"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"createdAt"}),(0,i.jsx)(n.td,{children:"Timestamp"}),(0,i.jsx)(n.td,{children:"Date when the story was added"})]})]})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"PlayerProgress Subcollection (within Rooms) Figure 7"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Field"}),(0,i.jsx)(n.th,{children:"Type"}),(0,i.jsx)(n.th,{children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"userId (PK)"}),(0,i.jsx)(n.td,{children:"String"}),(0,i.jsx)(n.td,{children:"User Id of the player"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"answers"}),(0,i.jsx)(n.td,{children:"Array"}),(0,i.jsx)(n.td,{children:"List of the answers submitted by the player"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"correctAnswers"}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Total correct answers by the player"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"attempts"}),(0,i.jsx)(n.td,{children:"Number"}),(0,i.jsx)(n.td,{children:"Total attempts made"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"lastActive"}),(0,i.jsx)(n.td,{children:"Timestamp"}),(0,i.jsx)(n.td,{children:"Last time the player interacted"})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"use-case-sequence-diagrams",children:"Use Case Sequence Diagrams"}),"\n",(0,i.jsx)(n.h2,{id:"use-case-1-room-management---setting-up-a-new-room",children:"Use Case 1: Room Management - Setting up a new room"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/project-aac-game-team-b/docs/requirements/use-case-descriptions#user-wants-to-start-a-new-game-room",children:"User wants to start a new game room"})}),"\n",(0,i.jsx)(s,{open:"True",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User opens the game on a device"}),"\n",(0,i.jsx)(n.li,{children:'User clicks the "Create a Game Room" button'}),"\n",(0,i.jsx)(n.li,{children:"User selects a story type"}),"\n",(0,i.jsx)(n.li,{children:"User selects a grade level"}),"\n",(0,i.jsx)(n.li,{children:"User selects the number of players"}),"\n",(0,i.jsx)(n.li,{children:'User clicks the "Start" button'}),"\n"]})}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    actor User\n    participant D as Device\n    participant CR as Create Room Screen\n    participant DB as Database\n\n    User ->> D: Looks at screen\n    D ->>+ CR: User decides to create a game room\n    D ->>+ CR: User sets up game options\n    CR ->>+ DB: Save game room setup data\n    DB --\x3e> CR: Validate game setup data\n    Note right of DB: Generate room code\n    DB --\x3e> CR: Return generated room code\n    CR --\x3e> D: Display game room code to host"}),"\n",(0,i.jsx)(n.p,{children:"Figure 8"}),"\n",(0,i.jsx)(n.h2,{id:"use-case-2-player-customization---new-player-profile",children:"Use Case 2: Player Customization - New player profile"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/project-aac-game-team-b/docs/requirements/use-case-descriptions#user-wants-to-set-up-a-new-player-profile-and-interaction-mode",children:"User wants to set up a new player profile and interaction mode"})}),"\n",(0,i.jsx)(s,{open:"True",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User successfully joins a game room"}),"\n",(0,i.jsx)(n.li,{children:"User enters their display name in an input field"}),"\n",(0,i.jsx)(n.li,{children:'User clicks a "Done" button'}),"\n"]})}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram\n    actor User\n    participant D as Device\n    participant PS as Profile Screen\n    participant DB as Database\n\n    User ->> D: Looks at screen\n    D ->>+ PS: Enters display name in text field and confirms\n    PS ->>+ DB: Validates user ID and saves display name\n    DB --\x3e>- PS: Validation success response\n    PS --\x3e> D: User is brought to a waiting screen"}),"\n",(0,i.jsx)(n.p,{children:"Figure 9"}),"\n",(0,i.jsx)(n.h2,{id:"use-case-3-room-management---player-joins-a-game-through-the-join-screen",children:"Use Case 3: Room Management - Player Joins a Game through the Join Screen"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/project-aac-game-team-b/docs/requirements/use-case-descriptions#user-wants-to-join-the-game-the-host-has-made",children:"User wants to join the game the host has made"})}),"\n",(0,i.jsx)(s,{open:"True",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:'User clicks on the "Join Game" button'}),"\n",(0,i.jsx)(n.li,{children:"User inputs the code displayed on the host's screen into the input box"}),"\n",(0,i.jsx)(n.li,{children:"User inputs the correct code and is brought to a lobby with all the other players who are participating in the game session"}),"\n"]})}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram \n    actor User\n    participant D as Device\n    participant GR as Game Room Screen\n    participant Database\n\n\n\n\n    User ->> D: Looks at screen \n    D ->>+ GR: User decided to join a game and enters token\n    GR ->>+ Database: Fetches token for validation\n    Database --\x3e>- GR: Return Token"}),"\n",(0,i.jsx)(n.p,{children:"Figure 10"}),"\n",(0,i.jsx)(n.h2,{id:"use-case-4-accessibility--aac",children:"Use Case 4: Accessibility & AAC"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/project-aac-game-team-b/docs/requirements/use-case-descriptions#users-utilize-a-built-in-aac-keyboard",children:"Users utilize a built-in AAC keyboard"})}),"\n",(0,i.jsx)(s,{open:"True",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User joins a room."}),"\n",(0,i.jsx)(n.li,{children:"User is notified that a keyboard layout will be available on their screen during gameplay"}),"\n",(0,i.jsx)(n.li,{children:"User is given a short tutorial on the AAC keyboard."}),"\n",(0,i.jsx)(n.li,{children:'User click a button to indicate readiness to "Start" the game.'}),"\n"]})}),"\n",(0,i.jsx)(n.mermaid,{value:"sequenceDiagram \n    actor User\n    participant D as Device\n    participant GR as Game Room Screen\n    participant Database\n\n\n\n\n    User ->> D: Looks at screen \n    D ->>+ GR: User has joined room\n    GR --\x3e>+ User: Notified that AAC keyboard layout will be available \n    GR ->>+ Database: Fetches tutorial content\n    Database --\x3e>- GR: Return tutorial content\n    GR --\x3e>+ User: Gives short tutorial on AAC keyboard "}),"\n",(0,i.jsx)(n.p,{children:"Figure 11"}),"\n",(0,i.jsx)(n.h2,{id:"game-mechanics",children:"Game Mechanics"}),"\n",(0,i.jsx)(n.h2,{id:"use-case-5-cloze-phraze-education---user-chooses-an-answer",children:"Use Case 5: Cloze Phraze Education - User Chooses an Answer"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/project-aac-game-team-b/docs/requirements/use-case-descriptions#user-chooses-an-answer",children:"User Chooses an Answer"})}),"\n",(0,i.jsx)(s,{open:"True",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User is in a game session using their device"}),"\n",(0,i.jsx)(n.li,{children:"User is prompted with a storyline containing a cloze pharse question"}),"\n",(0,i.jsx)(n.li,{children:"User chooses an answer choice"}),"\n",(0,i.jsx)(n.li,{children:'User clicks the "Confirm" button'}),"\n",(0,i.jsx)(n.li,{children:"User is shown their story illustrated"}),"\n",(0,i.jsx)(n.li,{children:"User is prompted with another sentence in the story"}),"\n"]})}),"\n",(0,i.jsx)(n.mermaid,{value:"\nsequenceDiagram \n    actor User\n    participant D as Device\n    participant GR as Game Screen\n    participant Database\n\n\n\n\n    User ->> D: Looks at screen \n    D ->>+ GR: User is given a cloze phrase question\n    GR ->>+ Database: Fetches cloze phrase question and answer choices\n    Database --\x3e>- GR: Return cloze phrase question and answer choices\n    GR --\x3e>- D: Returns cloze phrase question\n\n    D ->>+ GR: User chooses cloze phrase questions answer \n    GR --\x3e>+ D: User is shown their answer illustrated in the story and the pharse the user chose is played aloud \n  \n"}),"\n",(0,i.jsx)(n.p,{children:"Figure 12"}),"\n",(0,i.jsx)(n.h2,{id:"use-case-6-collaboration---users-take-turns-answering-a-question",children:"Use Case 6: Collaboration - Users Take Turns Answering a Question"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/project-aac-game-team-b/docs/requirements/use-case-descriptions#users-take-turns-answering-a-question",children:"Users Take Turns Answering a Question"})}),"\n",(0,i.jsx)(s,{open:"True",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User is in a game session using their device"}),"\n",(0,i.jsx)(n.li,{children:"User chooses an answer choice"}),"\n",(0,i.jsx)(n.li,{children:"User is shown their story illustrated"}),"\n",(0,i.jsx)(n.li,{children:"User is prompted with a pause screen indicating another player is answering"}),"\n",(0,i.jsx)(n.li,{children:"Second player answers"}),"\n",(0,i.jsx)(n.li,{children:"User is now able to answer a new cloze phrase question"}),"\n"]})}),"\n",(0,i.jsx)(n.mermaid,{value:"\nsequenceDiagram \n    actor User1\n    participant D as Device\n    participant GR as Game Screen\n\n\n\n\n    User1 ->> D: Looks at screen\n    D ->> GR: User chooses cloze phrase questions answer \n    GR --\x3e> D: User is shown their answer illustrated in the story\n\n    GR --\x3e> D: User is shown a pause screen to indicate another player is answering the next question\n\n    D ->> GR: User is able to answer a new cloze phrase question\n"}),"\n",(0,i.jsx)(n.p,{children:"Figure 13"}),"\n",(0,i.jsx)(n.h2,{id:"use-case-7-difficulty-scaling---user-wants-to-change-difficulty",children:"Use Case 7: Difficulty Scaling - User Wants to Change Difficulty"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"/project-aac-game-team-b/docs/requirements/use-case-descriptions#users-wants-to-change-from-easy-mode-to-medium-mode",children:"Users Wants to Change From Easy Mode to Medium Mode"})}),"\n",(0,i.jsx)(s,{open:"True",children:(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"User is in a easy mode game session using their device"}),"\n",(0,i.jsx)(n.li,{children:"User decides to change to medium mode game session"}),"\n",(0,i.jsx)(n.li,{children:"User clicks on the setting button"}),"\n",(0,i.jsx)(n.li,{children:"User is shown different settings options and clicks change difficulty button"}),"\n",(0,i.jsx)(n.li,{children:"User changes to medium difficulty"}),"\n",(0,i.jsx)(n.li,{children:"User is now able to answer a medium difficulty cloze phrase question"}),"\n"]})}),"\n",(0,i.jsx)(n.mermaid,{value:"\nsequenceDiagram \n    actor User\n    participant D as Device\n    participant GR as Game Screen\n    participant GS as Settings\n\n\n\n\n    User ->> D: Looks at screen\n    D ->> GR: Clicks on settings icon\n    GR ->> GS: Changes difficulty\n    GS --\x3e> GR: Returns difficulty changes \n"}),"\n",(0,i.jsx)(n.p,{children:"Figure 14"})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var i=s(96540);const r={},t=i.createContext(r);function a(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);