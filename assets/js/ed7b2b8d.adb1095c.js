"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3791],{23514:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>d,toc:()=>c});var r=s(74848),t=s(28453);const i={sidebar_position:1},a=void 0,d={id:"system-architecture/design",title:"design",description:"Purpose",source:"@site/docs/system-architecture/design.md",sourceDirName:"system-architecture",slug:"/system-architecture/design",permalink:"/project-aac-game-team-b/docs/system-architecture/design",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedBy:"Harpinder Singh",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",previous:{title:"System Architecture",permalink:"/project-aac-game-team-b/docs/category/system-architecture"},next:{title:"Development Environment",permalink:"/project-aac-game-team-b/docs/system-architecture/development-environment"}},l={},c=[{value:"Components Description",id:"components-description",level:2},{value:"Client (Front-End)",id:"client-front-end",level:3},{value:"Server (Back-End)",id:"server-back-end",level:3},{value:"Class Diagrams",id:"class-diagrams",level:3},{value:"Database",id:"database",level:3},{value:"Database Design",id:"database-design",level:3}];function o(e){const n={a:"a",em:"em",h2:"h2",h3:"h3",hr:"hr",li:"li",mermaid:"mermaid",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Purpose"})}),"\n",(0,r.jsx)(n.p,{children:"The architecture of StoryQuest is based on a client-server model using modern web technologies. The front-end client is built\nwith React and Next.js, while the back-end leverages Firebase for real-time database synchronization, authentication, and\naccessible experience for AAC users, incorporating symbol-based communication and text-to-speech capabilities."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Requirements"})}),"\n",(0,r.jsx)(n.h2,{id:"components-description",children:"Components Description"}),"\n",(0,r.jsx)(n.h3,{id:"client-front-end",children:"Client (Front-End)"}),"\n",(0,r.jsx)(n.p,{children:"The client is a React application built with Next.js framework, offering server-side rendering for improved performance and SEO. It provides\nthe user interface that students interact with, including AAC features, story navigation, and room management."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technologies Used:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"React (UI components)"}),"\n",(0,r.jsx)(n.li,{children:"Next.js (Routing and server-side rendering)"}),"\n",(0,r.jsx)(n.li,{children:"Tailwind CSS (Responsive and accessible styling)"}),"\n",(0,r.jsx)(n.li,{children:"Framer Motion (Smooth animations for kids)"}),"\n",(0,r.jsx)(n.li,{children:"ShadCN/UI (Pre-built, accessible UI components)"}),"\n",(0,r.jsx)(n.li,{children:"TypeScript (Ease of use in JavaScript)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Display the homepage with options to create or join a room"}),"\n",(0,r.jsx)(n.li,{children:"Render stories and fill-in-the-blank activities"}),"\n",(0,r.jsx)(n.li,{children:"Handle AAC interactions (symbol grids, text-to-speech)"}),"\n",(0,r.jsx)(n.li,{children:"Communicate with Firebase for real-time updates and authentication"}),"\n",(0,r.jsx)(n.li,{children:"Provide responsive design for tablets and desktops"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Interface:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Firebase SDK: The client uses the Firebase JavaScript SDK for real-time communication with the back-end."}),"\n",(0,r.jsx)(n.li,{children:"AAC Symbol Library (ARASAAC): Provides visual symbols for communication"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"server-back-end",children:"Server (Back-End)"}),"\n",(0,r.jsx)(n.p,{children:"The back-end services are managed by Firebase, which provides real-time database capabilities, authentication, and cloud functions for game logic.\nThis architecture minimizes server management overhead while offering scalability and performance."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Technologies Used:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Firebase Authentication: For secure room joining and session management."}),"\n",(0,r.jsx)(n.li,{children:"Firebase Firestore: A NoSQL real-time database to store game data, room information, and group progress."}),"\n",(0,r.jsx)(n.li,{children:"Firebase Cloud Functions: To handle server-side logic like validating game answers and managing game state."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Manage session tokens."}),"\n",(0,r.jsx)(n.li,{children:"Handle real-time game state updates across all players."}),"\n",(0,r.jsx)(n.li,{children:"Store and retrieve stories, game progress, and player data."}),"\n",(0,r.jsx)(n.li,{children:"Execute server-side logic for game validation (like answer validation)"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Interfaces:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Client Requests: The client interacts with the server via Firebase SDK calls, which handle real-time data synchronization."}),"\n",(0,r.jsx)(n.li,{children:"Cloud Functions Triggers: Automatically execute server-side logic when certain conditions are met (like when a new answer is submitted)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"class-diagrams",children:"Class Diagrams"}),"\n",(0,r.jsx)(n.mermaid,{value:"classDiagram\n\n    StartPage <|-- HostPage \n    StartPage <|-- PlayerPage\n    PlayerPage <|-- User\n    GameContainer *-- QuestionDisplay : Displays answers \n    QuestionDisplay *-- Score : Displays score\n    GameContainer o-- AACBoard : Chooses answers\n    GameContainer --|> PlayerPage : Manages turns\n    GameContainer --|> Firebase : Sends answer for validation\n    Firebase --|> PlayerProgress : Updates stats\n    PlayerProgress --|> GameContainer : Sends back stats\n    PlayerProgress --|> Score : Updates score\n    \n    class StartPage {\n        +joinGame()\n        +hostGame()\n    }\n\n    class HostPage {\n\t    +String story\n\t    +int difficulty\n\t    +int numPlayers\n\t    +selectStory() String\n\t    +selectDifficulty() int\n\t    +selectNumPlayers() int\n\t    +startGameRoom()\n    }\n\n    class PlayerPage {\n\t    +User[] users\n\t    +boolean allUsersJoined\n\t    +startGame()\n    }\n\n    class GameContainer {\n        +selectedWords: String[]\n\t    +updateTurn()\n        +handleSelect(imgUrl: String): void\n    }\n\n    class Score {\n\t    -int score\n        +updateScore()\n    }\n\n    class AACBoard {\n        +String[] pictograms\n\t   +fetchPictograms(query: String): String[]\n        +onSelect(imgUrl: String): void\n    }\n\n    class User {\n\t    -String userId\n\t    -String name\n\t    +String preferences\n    }\n\n    class FirebaseController {\n\t    +authenticateUser()\n\t    +getRoomData(roomId)\n\t    +updateGameState(roomId, data)\n\t    +validateAnswer(roomId, userId, answer)\n    }\n\n    class PlayerProgress {\n\t    -String roomId\n\t    -String userId\n\t    -String[] answers\n\t    -int correctAnswers\n\t    -int attempts\n\t    +updateProgress()\n    }\n\n    class QuestionDisplay {\n\t    +String[] phrase\n\t    -String playerAnswer\n\t    +int numBlanks\n\t    +fillPhraseFromPlayerAnswer()\n\t    +displayScore()\n\t    +submit()\n\t    +validatePhrase() int\n    }"}),"\n",(0,r.jsxs)(n.p,{children:["This class diagram shows the relationships between different components in the StoryQuest system.\nThe system provides a ",(0,r.jsx)(n.strong,{children:"StartPage"}),", from which a ",(0,r.jsx)(n.strong,{children:"User"})," can navigate to either the ",(0,r.jsx)(n.strong,{children:"HostPage"}),",\nto create a room & change settings, or join a room, leading to the ",(0,r.jsx)(n.strong,{children:"PlayerPage"}),", where once all users have joined,\none can start the game. Once the game is started, the ",(0,r.jsx)(n.strong,{children:"GameContainer"})," takes control. It contains a ",(0,r.jsx)(n.strong,{children:"QuestionDisplay"}),"\nand the ",(0,r.jsx)(n.strong,{children:"AACBoard"}),". Once a ",(0,r.jsx)(n.strong,{children:"User"})," selects an answer on the ",(0,r.jsx)(n.strong,{children:"AACBoard"})," it is displayed on the ",(0,r.jsx)(n.strong,{children:"QuestionDisplay"})," and\nsent to ",(0,r.jsx)(n.strong,{children:"FirebaseController"})," to be sent to Firebase for validation. Once an answer is validated it is sent to ",(0,r.jsx)(n.strong,{children:"PlayerProgress"}),"\nwhich updates the ",(0,r.jsx)(n.strong,{children:"GameContainer"})," and updates ",(0,r.jsx)(n.strong,{children:"Score"}),", which sends score to ",(0,r.jsx)(n.strong,{children:"QuestionDisplay"})," to be shown."]}),"\n",(0,r.jsx)(n.h3,{id:"database",children:"Database"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Users:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"userId: Unique identifier"}),"\n",(0,r.jsx)(n.li,{children:"name: Player's name"}),"\n",(0,r.jsx)(n.li,{children:"preferences: AAC settings, favorite symbols"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rooms:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"roomId: Unique code for room access"}),"\n",(0,r.jsx)(n.li,{children:"hostId: The player who created the room"}),"\n",(0,r.jsx)(n.li,{children:"players: List of players in the room"}),"\n",(0,r.jsx)(n.li,{children:"currentTurn: Tracks whose turn it is"}),"\n",(0,r.jsx)(n.li,{children:"storyProgress: Current state of the story"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Stories:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"storyId: Unique ID"}),"\n",(0,r.jsx)(n.li,{children:"gradeLevel: Target grade level (1st-3rd)"}),"\n",(0,r.jsx)(n.li,{children:"content: Story text with blanks"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Responsibilities:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Persist user data and game state"}),"\n",(0,r.jsx)(n.li,{children:"Support real-time synchronization of game progress"}),"\n",(0,r.jsx)(n.li,{children:"Allow dynamic story loading and AAC customization"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Interfaces:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Firebase Firestore SDK: Used by both client and server to read/write data in real-time"}),"\n",(0,r.jsx)(n.li,{children:"Cloud Functions: Perform automated updates (like saving game progress)"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"database-design",children:"Database Design"}),"\n",(0,r.jsx)(n.p,{children:"Here is the database section with an Entity-Relationship Diagram (ERD) and a table design for StoryQuest.\nSince we are using FireBase Firestore, which is a NoSQL database, the structure will be document-based,\nbut we can still represent it in a relational style for clarity."}),"\n",(0,r.jsx)(n.p,{children:"Entities and Relationships:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"User represents a player."}),"\n",(0,r.jsx)(n.li,{children:"A Room is hosted by One user but can have multiple users (as in players)."}),"\n",(0,r.jsx)(n.li,{children:"A room is then associated with one story."}),"\n",(0,r.jsx)(n.li,{children:"Each user in a room has a corresponding playerProgress."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Entity-Relationship Diagram"})}),"\n",(0,r.jsx)(n.mermaid,{value:'erDiagram\n    USER {\n        string userId \n        string name\n        string email\n        json preferences\n        timestamp createdAt\n    }\n\n    ROOM {\n        string roomId \n        string hostId \n        string storyId \n        number gradeLevel\n        number numPlayers\n        string currentTurn \n        boolean isActive\n        timestamp createdAt\n    }\n\n    STORY {\n        string storyId \n        string title\n        array content\n        number gradeLevel\n        timestamp createdAt\n    }\n\n    ROOM_PLAYERS {\n        string roomId \n        string userId \n        string name\n        timestamp joinedAt\n    }\n\n    PLAYER_PROGRESS {\n        string roomId \n        string userId \n        array answers\n        number correctAnswers\n        number attempts\n        timestamp lastActive\n    }\n\n    USER ||--|{ ROOM_PLAYERS : "User joins Room Players"\n    ROOM ||--|{ ROOM_PLAYERS : "Room has Room Players"\n    ROOM ||--|{ PLAYER_PROGRESS : "Player Progress tracks each player"\n    ROOM ||--|{ STORY : "Each room uses a story"\n    STORY ||--|{ ROOM : "Is played in"\n    USER ||--|{ PLAYER_PROGRESS : "Tracks the individual player"'}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Table Design"})}),"\n",(0,r.jsx)(n.p,{children:"Here is how the data would be structured in Firestore. Though Firestore is a NoSQL database, this relational layout helps clarify the relationships."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Users Collection"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"userId"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"Unique Id (Firebase Auth UID)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"name"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"Player's display name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"preferences"}),(0,r.jsx)(n.td,{children:"Map"}),(0,r.jsx)(n.td,{children:"AAC preferences"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"createdAt"}),(0,r.jsx)(n.td,{children:"Timestamp"}),(0,r.jsx)(n.td,{children:"Account creation date"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Rooms Collections"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"roomId"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"Unique code for room access"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"hostId"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"User ID of the room host"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"storyId"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"ID of selected story"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"difficulty"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Difficulty level selected for the room"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"numPlayers"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Number of players (1-4)"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"currentTurn"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"User Id of player whose turn it is"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"createdAt"}),(0,r.jsx)(n.td,{children:"Timestamp"}),(0,r.jsx)(n.td,{children:"Room creation date"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"isActive"}),(0,r.jsx)(n.td,{children:"Boolean"}),(0,r.jsx)(n.td,{children:"Indicates if the game is in progress"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"RoomPlayers Subcollection (within rooms)"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"userId"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"User Id of the player"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"name"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"Player's display name"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"joinedAt"}),(0,r.jsx)(n.td,{children:"Timestamp"}),(0,r.jsx)(n.td,{children:"Time when the players joined the room"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Stories Collections"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"storyId"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"Unique id for the story"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"title"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"Title of the story"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"content"}),(0,r.jsx)(n.td,{children:"Array"}),(0,r.jsx)(n.td,{children:"Story text with blanks marked"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"difficulty"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Intended difficulty level"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"createdAt"}),(0,r.jsx)(n.td,{children:"Timestamp"}),(0,r.jsx)(n.td,{children:"Date when the story was added"})]})]})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"PlayerProgress Subcollection (within Rooms)"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Field"}),(0,r.jsx)(n.th,{children:"Type"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"userId"}),(0,r.jsx)(n.td,{children:"String"}),(0,r.jsx)(n.td,{children:"User Id of the player"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"answers"}),(0,r.jsx)(n.td,{children:"Array"}),(0,r.jsx)(n.td,{children:"List of the answers submitted by the player"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"correctAnswers"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Total correct answers by the player"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"attempts"}),(0,r.jsx)(n.td,{children:"Number"}),(0,r.jsx)(n.td,{children:"Total attempts made"})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"lastActive"}),(0,r.jsx)(n.td,{children:"Timestamp"}),(0,r.jsx)(n.td,{children:"Last time the player interacted"})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.p,{children:"In addition to the general requirements the Design Document - Part I Architecture will contain:"}),"\n",(0,r.jsx)(n.p,{children:"A description the different components and their interfaces. For example: client, server, database."}),"\n",(0,r.jsx)(n.p,{children:"For each component provide class diagrams showing the classes to be developed (or used) and their relationship."}),"\n",(0,r.jsxs)(n.p,{children:["Sequence diagrams showing the data flow for ",(0,r.jsx)(n.em,{children:"all"})," use cases.\xa0One sequence diagram corresponds to one use case and different use cases should have different corresponding sequence diagrams."]}),"\n",(0,r.jsx)(n.p,{children:"Describe algorithms employed in your project, e.g. neural network paradigm, training and training data set, etc."}),"\n",(0,r.jsx)(n.p,{children:"If there is a database:"}),"\n",(0,r.jsx)(n.p,{children:"Entity-relation diagram."}),"\n",(0,r.jsx)(n.p,{children:"Table design."}),"\n",(0,r.jsxs)(n.p,{children:["A check list for architecture design is attached here ",(0,r.jsx)(n.a,{href:"https://templeu.instructure.com/courses/106563/files/16928870/download?wrap=1",title:"architecture_design_checklist.pdf",children:"architecture_design_checklist.pdf"}),"\xa0 and should be used as a guidance."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(o,{...e})}):o(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);